
fancontroller-v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000003e8  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800094  00800094  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b4  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023a  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014b  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	75 c1       	rjmp	.+746    	; 0x2f0 <__vector_2>
   6:	be c1       	rjmp	.+892    	; 0x384 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	38 c1       	rjmp	.+624    	; 0x282 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 ee       	ldi	r30, 0xE8	; 232
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a4 39       	cpi	r26, 0x94	; 148
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a4 e9       	ldi	r26, 0x94	; 148
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 3a       	cpi	r26, 0xA0	; 160
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	8f d0       	rcall	.+286    	; 0x170 <main>
  52:	c8 c1       	rjmp	.+912    	; 0x3e4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <load_settings_from_eeprom>:

/****************************/
/* INITIALIZATION FUNCTIONS */
/****************************/

void load_settings_from_eeprom(void){
  56:	0f 93       	push	r16
  58:	1f 93       	push	r17
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
	//load the individual settings from EEPROM
	for(i = 0; i < 4; i++){
  5e:	10 92 95 00 	sts	0x0095, r1
		eeprom_settings[i]	= eeprom_read_byte((uint8_t *) i); if(eeprom_settings[i] > 19){ eeprom_settings[i] = 10; }
  62:	0a e0       	ldi	r16, 0x0A	; 10
/* INITIALIZATION FUNCTIONS */
/****************************/

void load_settings_from_eeprom(void){
	//load the individual settings from EEPROM
	for(i = 0; i < 4; i++){
  64:	10 91 95 00 	lds	r17, 0x0095
  68:	14 30       	cpi	r17, 0x04	; 4
  6a:	80 f4       	brcc	.+32     	; 0x8c <load_settings_from_eeprom+0x36>
		eeprom_settings[i]	= eeprom_read_byte((uint8_t *) i); if(eeprom_settings[i] > 19){ eeprom_settings[i] = 10; }
  6c:	c1 2f       	mov	r28, r17
  6e:	d0 e0       	ldi	r29, 0x00	; 0
  70:	ce 01       	movw	r24, r28
  72:	a2 d1       	rcall	.+836    	; 0x3b8 <__eerd_byte_tn24a>
  74:	fe 01       	movw	r30, r28
  76:	e0 57       	subi	r30, 0x70	; 112
  78:	ff 4f       	sbci	r31, 0xFF	; 255
  7a:	80 83       	st	Z, r24
  7c:	80 81       	ld	r24, Z
  7e:	84 31       	cpi	r24, 0x14	; 20
  80:	08 f0       	brcs	.+2      	; 0x84 <load_settings_from_eeprom+0x2e>
  82:	00 83       	st	Z, r16
/* INITIALIZATION FUNCTIONS */
/****************************/

void load_settings_from_eeprom(void){
	//load the individual settings from EEPROM
	for(i = 0; i < 4; i++){
  84:	1f 5f       	subi	r17, 0xFF	; 255
  86:	10 93 95 00 	sts	0x0095, r17
  8a:	ec cf       	rjmp	.-40     	; 0x64 <load_settings_from_eeprom+0xe>
		eeprom_settings[i]	= eeprom_read_byte((uint8_t *) i); if(eeprom_settings[i] > 19){ eeprom_settings[i] = 10; }
	}
	
	CURRENT_SETTING		= eeprom_read_byte((uint8_t *) 4); 
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	93 d1       	rcall	.+806    	; 0x3b8 <__eerd_byte_tn24a>
  92:	80 93 97 00 	sts	0x0097, r24
	
	//increment current setting, check if it isn't exceeding our settings pages and re-store the incremented value to EEPROM
	CURRENT_SETTING++; if(CURRENT_SETTING > MAX_SETTING) CURRENT_SETTING = 0;
  96:	80 91 97 00 	lds	r24, 0x0097
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 97 00 	sts	0x0097, r24
  a0:	80 91 97 00 	lds	r24, 0x0097
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	10 f0       	brcs	.+4      	; 0xac <load_settings_from_eeprom+0x56>
  a8:	10 92 97 00 	sts	0x0097, r1
	eeprom_write_byte((uint8_t *) 4, CURRENT_SETTING);
  ac:	60 91 97 00 	lds	r22, 0x0097
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	89 d1       	rcall	.+786    	; 0x3c8 <__eewr_byte_tn24a>
	
	//translate the offset settings into actual usable numbers for our calculations
	phys_settings[0] = tach_lut[eeprom_settings[0]];
  b6:	e0 91 90 00 	lds	r30, 0x0090
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	90 93 89 00 	sts	0x0089, r25
  cc:	80 93 88 00 	sts	0x0088, r24
	phys_settings[1] = tach_lut[eeprom_settings[1]];
  d0:	e0 91 91 00 	lds	r30, 0x0091
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e0 5a       	subi	r30, 0xA0	; 160
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	80 81       	ld	r24, Z
  e0:	91 81       	ldd	r25, Z+1	; 0x01
  e2:	90 93 8b 00 	sts	0x008B, r25
  e6:	80 93 8a 00 	sts	0x008A, r24
	phys_settings[2] = eeprom_settings[2] * 2;
  ea:	80 91 92 00 	lds	r24, 0x0092
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	90 93 8d 00 	sts	0x008D, r25
  f8:	80 93 8c 00 	sts	0x008C, r24
	phys_settings[3] = eeprom_settings[3] * 2;
  fc:	80 91 93 00 	lds	r24, 0x0093
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	90 93 8f 00 	sts	0x008F, r25
 10a:	80 93 8e 00 	sts	0x008E, r24
	
	//turn on the relevant LED
	PORTA |= (1 << CURRENT_SETTING);
 10e:	2b b3       	in	r18, 0x1b	; 27
 110:	30 91 97 00 	lds	r19, 0x0097
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	03 2e       	mov	r0, r19
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__stack+0x3f>
 11c:	88 0f       	add	r24, r24
 11e:	0a 94       	dec	r0
 120:	ea f7       	brpl	.-6      	; 0x11c <__stack+0x3d>
 122:	28 2b       	or	r18, r24
 124:	2b bb       	out	0x1b, r18	; 27
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	08 95       	ret

00000130 <initialize_hardware>:

void initialize_hardware(void){
	//set port direction bits to 1 for all output pins
	DDRA	= ADJ_PWMOUT_MIN_PIN | ADJ_PWMOUT_MAX_PIN | ADJ_TACHOUT_MIN_PIN | ADJ_TACHOUT_MAX_PIN |
 130:	8f e6       	ldi	r24, 0x6F	; 111
 132:	8a bb       	out	0x1a, r24	; 26
			  MISO_TACHMOBO_PIN | MOSI_PWMOUT_PIN;
	DDRB	= 0;
 134:	17 ba       	out	0x17, r1	; 23
	
	//pull-up on SCK_TACHMOBO, UP_PIN and DOWN_PIN
	PORTA  |= MISO_TACHMOBO_PIN;
 136:	dd 9a       	sbi	0x1b, 5	; 27
	PORTB  |= UP_PIN | DOWN_PIN;
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	88 bb       	out	0x18, r24	; 24
	
	//initialize PCINT0
	//PCINT0 triggers on SCK_TACHOUT, measuring the tachometer signal produced by the attached fan
	//it always triggers on the positive edge
	PCMSK0 |= (1 << PCINT4);
 13e:	94 9a       	sbi	0x12, 4	; 18
	
	//initialize PCINT1
	//PCINT1 triggers on any state change of the UP and DOWN buttons
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
 140:	80 b5       	in	r24, 0x20	; 32
 142:	83 60       	ori	r24, 0x03	; 3
 144:	80 bd       	out	0x20, r24	; 32
	GIMSK  |= (1 << PCIE1) | (1 << PCIE0);
 146:	8b b7       	in	r24, 0x3b	; 59
 148:	80 63       	ori	r24, 0x30	; 48
 14a:	8b bf       	out	0x3b, r24	; 59
	
	//initialize TCNT0
	//Timer/counter0 is used for measurements only, and simply freeruns
	TCCR0B	= TIMER_CLKSEL_DIV8;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	83 bf       	out	0x33, r24	; 51
	//initialize TCNT1
	//Timer/counter1 is a 16-bit counter that just counts at clkio/2
	//It overflows at 160 to generate a 25kHz waveform
	//and it outputs to PA6 (OC1A) to physically output that PWM waveform
	//The overflow interrupt is used to generate the MISO_TACHMOBO signal on PA5
	TCCR1A	= (1 << COM1A1) | (1 << WGM11);													//enable output to OCR1A
 150:	82 e8       	ldi	r24, 0x82	; 130
 152:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	= TIMER_CLKSEL_DIV8 | (1 << WGM13) | (1 << WGM12);								//run at clkio/64, use WGM3:0=1110, i.e. fast PWM with TOP=ICR1 and both COMPA and COMPB intact
 154:	8a e1       	ldi	r24, 0x1A	; 26
 156:	8e bd       	out	0x2e, r24	; 46
	TIMSK1	= TIMER_ENABLE_OVF_INTERRUPT;													//enable overflow interrupt
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	8c b9       	out	0x0c, r24	; 12
	OCR1A	= 20;																			//duty is 50% by default
 15c:	84 e1       	ldi	r24, 0x14	; 20
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	9b bd       	out	0x2b, r25	; 43
 162:	8a bd       	out	0x2a, r24	; 42
	ICR1	= 40;																			//period is 160, equivalent to 25kHz.
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	95 bd       	out	0x25, r25	; 37
 16a:	84 bd       	out	0x24, r24	; 36
	
	sei();																					//enable global interrupts
 16c:	78 94       	sei
 16e:	08 95       	ret

00000170 <main>:
		uint8_t			i					= 0;	//iteration variable
		uint8_t			temp				= 0;

int main(void)
{
	load_settings_from_eeprom();
 170:	72 df       	rcall	.-284    	; 0x56 <load_settings_from_eeprom>
	initialize_hardware();
 172:	de df       	rcall	.-68     	; 0x130 <initialize_hardware>
		//this is a very fast signal, so we don't want to use interrupts for this
		//hence we're doing this in the main loop so we can be easily interrupted by more
		//important stuff.
		
		//wait for a leading edge
		temp = 50;
 174:	42 e3       	ldi	r20, 0x32	; 50
	initialize_hardware();
   
    while(1)
    {
		//a button was pressed
        if(button_pressed){	
 176:	80 91 96 00 	lds	r24, 0x0096
 17a:	88 23       	and	r24, r24
 17c:	09 f4       	brne	.+2      	; 0x180 <main+0x10>
 17e:	40 c0       	rjmp	.+128    	; 0x200 <main+0x90>
			if(button_pressed == 1){	//up
 180:	80 91 96 00 	lds	r24, 0x0096
				if(eeprom_settings[CURRENT_SETTING] < 19) eeprom_settings[CURRENT_SETTING]++;
 184:	e0 91 97 00 	lds	r30, 0x0097
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 57       	subi	r30, 0x70	; 112
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
   
    while(1)
    {
		//a button was pressed
        if(button_pressed){	
			if(button_pressed == 1){	//up
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <main+0x38>
				if(eeprom_settings[CURRENT_SETTING] < 19) eeprom_settings[CURRENT_SETTING]++;
 192:	80 81       	ld	r24, Z
 194:	83 31       	cpi	r24, 0x13	; 19
 196:	98 f4       	brcc	.+38     	; 0x1be <main+0x4e>
 198:	e0 91 97 00 	lds	r30, 0x0097
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	e0 57       	subi	r30, 0x70	; 112
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	0a c0       	rjmp	.+20     	; 0x1bc <main+0x4c>
			} else {					//down
				if(eeprom_settings[CURRENT_SETTING] > 0) eeprom_settings[CURRENT_SETTING]--;
 1a8:	80 81       	ld	r24, Z
 1aa:	88 23       	and	r24, r24
 1ac:	41 f0       	breq	.+16     	; 0x1be <main+0x4e>
 1ae:	e0 91 97 00 	lds	r30, 0x0097
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e0 57       	subi	r30, 0x70	; 112
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	80 83       	st	Z, r24
			}
			
			
			//and modify the corresponding phys_setting
			if(CURRENT_SETTING < 2){
 1be:	80 91 97 00 	lds	r24, 0x0097
				phys_settings[CURRENT_SETTING] = tach_lut[eeprom_settings[CURRENT_SETTING]];
 1c2:	e0 91 97 00 	lds	r30, 0x0097
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	a0 91 97 00 	lds	r26, 0x0097
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	a0 57       	subi	r26, 0x70	; 112
 1d0:	bf 4f       	sbci	r27, 0xFF	; 255
				if(eeprom_settings[CURRENT_SETTING] > 0) eeprom_settings[CURRENT_SETTING]--;
			}
			
			
			//and modify the corresponding phys_setting
			if(CURRENT_SETTING < 2){
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	48 f4       	brcc	.+18     	; 0x1e8 <main+0x78>
				phys_settings[CURRENT_SETTING] = tach_lut[eeprom_settings[CURRENT_SETTING]];
 1d6:	ac 91       	ld	r26, X
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	aa 0f       	add	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	a0 5a       	subi	r26, 0xA0	; 160
 1e0:	bf 4f       	sbci	r27, 0xFF	; 255
 1e2:	8d 91       	ld	r24, X+
 1e4:	9c 91       	ld	r25, X
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <main+0x80>
			} else {
				phys_settings[CURRENT_SETTING] = eeprom_settings[CURRENT_SETTING] * 2;
 1e8:	8c 91       	ld	r24, X
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e8 57       	subi	r30, 0x78	; 120
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	91 83       	std	Z+1, r25	; 0x01
 1fa:	80 83       	st	Z, r24
			}
			
			button_pressed = 0;	//release flag so we can service another button press
 1fc:	10 92 96 00 	sts	0x0096, r1
		//this is a very fast signal, so we don't want to use interrupts for this
		//hence we're doing this in the main loop so we can be easily interrupted by more
		//important stuff.
		
		//wait for a leading edge
		temp = 50;
 200:	40 93 94 00 	sts	0x0094, r20
		while(!(PINB & PWM_IN_PIN) && temp){temp++;}	//we include a counter to allow this loop to exit after a short timeout
 204:	b2 99       	sbic	0x16, 2	; 22
 206:	08 c0       	rjmp	.+16     	; 0x218 <main+0xa8>
 208:	80 91 94 00 	lds	r24, 0x0094
 20c:	88 23       	and	r24, r24
 20e:	21 f0       	breq	.+8      	; 0x218 <main+0xa8>
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	80 93 94 00 	sts	0x0094, r24
 216:	f6 cf       	rjmp	.-20     	; 0x204 <main+0x94>
		temp = 50;	//reset temp
 218:	40 93 94 00 	sts	0x0094, r20
		TCNT0 = 0;	//start the timer
 21c:	12 be       	out	0x32, r1	; 50
 21e:	20 91 94 00 	lds	r18, 0x0094
		while(PINB & PWM_IN_PIN && temp){temp++;}
 222:	b2 9b       	sbis	0x16, 2	; 22
 224:	06 c0       	rjmp	.+12     	; 0x232 <main+0xc2>
 226:	22 23       	and	r18, r18
 228:	21 f0       	breq	.+8      	; 0x232 <main+0xc2>
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	20 93 94 00 	sts	0x0094, r18
 230:	f6 cf       	rjmp	.-20     	; 0x21e <main+0xae>
		pwm_duty_m = TCNT0;
 232:	82 b7       	in	r24, 0x32	; 50
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 99 00 	sts	0x0099, r25
 23a:	80 93 98 00 	sts	0x0098, r24
			
		//at this time we either have some TCNT value between 0-40(ish) representing the duty cycle of the PWM signal
		//or we have a value of temp=0 because we had a timeout
		if(temp){	//non-timeout
 23e:	22 23       	and	r18, r18
 240:	09 f4       	brne	.+2      	; 0x244 <main+0xd4>
 242:	99 cf       	rjmp	.-206    	; 0x176 <main+0x6>
			if(pwm_duty_m < phys_settings[3] && pwm_duty_m > phys_settings[2]){
 244:	20 91 98 00 	lds	r18, 0x0098
 248:	30 91 99 00 	lds	r19, 0x0099
 24c:	80 91 8e 00 	lds	r24, 0x008E
 250:	90 91 8f 00 	lds	r25, 0x008F
 254:	28 17       	cp	r18, r24
 256:	39 07       	cpc	r19, r25
 258:	08 f0       	brcs	.+2      	; 0x25c <main+0xec>
 25a:	8d cf       	rjmp	.-230    	; 0x176 <main+0x6>
 25c:	20 91 98 00 	lds	r18, 0x0098
 260:	30 91 99 00 	lds	r19, 0x0099
 264:	80 91 8c 00 	lds	r24, 0x008C
 268:	90 91 8d 00 	lds	r25, 0x008D
 26c:	82 17       	cp	r24, r18
 26e:	93 07       	cpc	r25, r19
 270:	08 f0       	brcs	.+2      	; 0x274 <main+0x104>
 272:	81 cf       	rjmp	.-254    	; 0x176 <main+0x6>
				OCR1A = pwm_duty_m;				
 274:	80 91 98 00 	lds	r24, 0x0098
 278:	90 91 99 00 	lds	r25, 0x0099
 27c:	9b bd       	out	0x2b, r25	; 43
 27e:	8a bd       	out	0x2a, r24	; 42
 280:	7a cf       	rjmp	.-268    	; 0x176 <main+0x6>

00000282 <__vector_8>:
/* INTERRUPT HANDLERS */
/**********************/

//timer1 overflow interrupt, set MISO_TACHMOBO
//timer1 overflow also acts as an arbiter for the measurement cycle
ISR(TIM1_OVF_vect){
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
	tach++;
 294:	80 91 9c 00 	lds	r24, 0x009C
 298:	90 91 9d 00 	lds	r25, 0x009D
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 9d 00 	sts	0x009D, r25
 2a2:	80 93 9c 00 	sts	0x009C, r24
	if(tach > tach_period){
 2a6:	20 91 9c 00 	lds	r18, 0x009C
 2aa:	30 91 9d 00 	lds	r19, 0x009D
 2ae:	80 91 9e 00 	lds	r24, 0x009E
 2b2:	90 91 9f 00 	lds	r25, 0x009F
 2b6:	82 17       	cp	r24, r18
 2b8:	93 07       	cpc	r25, r19
 2ba:	88 f4       	brcc	.+34     	; 0x2de <__vector_8+0x5c>
		PORTA ^= MISO_TACHMOBO_PIN;
 2bc:	8b b3       	in	r24, 0x1b	; 27
 2be:	90 e2       	ldi	r25, 0x20	; 32
 2c0:	89 27       	eor	r24, r25
 2c2:	8b bb       	out	0x1b, r24	; 27
		tach = 0;	
 2c4:	10 92 9d 00 	sts	0x009D, r1
 2c8:	10 92 9c 00 	sts	0x009C, r1
		lasttach++;
 2cc:	80 91 9a 00 	lds	r24, 0x009A
 2d0:	90 91 9b 00 	lds	r25, 0x009B
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 9b 00 	sts	0x009B, r25
 2da:	80 93 9a 00 	sts	0x009A, r24
	}	
}
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_2>:
//PCINT0 is armed on SCK_TACHOUT
//when PCINT0 is triggered, the fan has completed half a revolution
//ideally, in that time we also want to have output exactly 1 pulse, except
//when we're at the setting limits. So if we actually output more than one
//pulse we should slow down, and conversely.
ISR(PCINT0_vect){
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
	if(!lasttach){	//we're outputting too slow a signal, speed up!
 302:	80 91 9a 00 	lds	r24, 0x009A
 306:	90 91 9b 00 	lds	r25, 0x009B
 30a:	89 2b       	or	r24, r25
 30c:	a1 f4       	brne	.+40     	; 0x336 <__vector_2+0x46>
		if(tach_period > phys_settings[0]){ tach_period--; }
 30e:	20 91 9e 00 	lds	r18, 0x009E
 312:	30 91 9f 00 	lds	r19, 0x009F
 316:	80 91 88 00 	lds	r24, 0x0088
 31a:	90 91 89 00 	lds	r25, 0x0089
 31e:	82 17       	cp	r24, r18
 320:	93 07       	cpc	r25, r19
 322:	48 f4       	brcc	.+18     	; 0x336 <__vector_2+0x46>
 324:	80 91 9e 00 	lds	r24, 0x009E
 328:	90 91 9f 00 	lds	r25, 0x009F
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	90 93 9f 00 	sts	0x009F, r25
 332:	80 93 9e 00 	sts	0x009E, r24
	}
	
	if(lasttach > 1){
 336:	80 91 9a 00 	lds	r24, 0x009A
 33a:	90 91 9b 00 	lds	r25, 0x009B
 33e:	02 97       	sbiw	r24, 0x02	; 2
 340:	a0 f0       	brcs	.+40     	; 0x36a <__vector_2+0x7a>
		if(tach_period < phys_settings[1]){ tach_period++; }
 342:	20 91 9e 00 	lds	r18, 0x009E
 346:	30 91 9f 00 	lds	r19, 0x009F
 34a:	80 91 8a 00 	lds	r24, 0x008A
 34e:	90 91 8b 00 	lds	r25, 0x008B
 352:	28 17       	cp	r18, r24
 354:	39 07       	cpc	r19, r25
 356:	48 f4       	brcc	.+18     	; 0x36a <__vector_2+0x7a>
 358:	80 91 9e 00 	lds	r24, 0x009E
 35c:	90 91 9f 00 	lds	r25, 0x009F
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 9f 00 	sts	0x009F, r25
 366:	80 93 9e 00 	sts	0x009E, r24
	}
	
	lasttach = 0;
 36a:	10 92 9b 00 	sts	0x009B, r1
 36e:	10 92 9a 00 	sts	0x009A, r1
}
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__vector_3>:

//PCINT1 is armed on UP and DOWN
//a button press is going to cause either UP or DOWN to change to LOW, so we test for that to ascertain
//whether we need to increment or decrement the current value
ISR(PCINT1_vect){
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	8f 93       	push	r24
	if(!button_pressed){	//wait until main() cleared the previous interrupt	
 390:	80 91 96 00 	lds	r24, 0x0096
 394:	81 11       	cpse	r24, r1
 396:	0a c0       	rjmp	.+20     	; 0x3ac <__vector_3+0x28>
		if(!(PINB & UP_PIN)){
 398:	b1 99       	sbic	0x16, 1	; 22
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <__vector_3+0x1e>
			button_pressed = 1;	//UP
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 96 00 	sts	0x0096, r24
		} 
		if(!(PINB & DOWN_PIN)){
 3a2:	b0 99       	sbic	0x16, 0	; 22
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <__vector_3+0x28>
			button_pressed = 2; //DOWN
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	80 93 96 00 	sts	0x0096, r24
		}
	}
	
	//the rest is done in main() so as not to choke out other interrupts
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__eerd_byte_tn24a>:
 3b8:	e1 99       	sbic	0x1c, 1	; 28
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <__eerd_byte_tn24a>
 3bc:	1f ba       	out	0x1f, r1	; 31
 3be:	8e bb       	out	0x1e, r24	; 30
 3c0:	e0 9a       	sbi	0x1c, 0	; 28
 3c2:	99 27       	eor	r25, r25
 3c4:	8d b3       	in	r24, 0x1d	; 29
 3c6:	08 95       	ret

000003c8 <__eewr_byte_tn24a>:
 3c8:	26 2f       	mov	r18, r22

000003ca <__eewr_r18_tn24a>:
 3ca:	e1 99       	sbic	0x1c, 1	; 28
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <__eewr_r18_tn24a>
 3ce:	1c ba       	out	0x1c, r1	; 28
 3d0:	1f ba       	out	0x1f, r1	; 31
 3d2:	8e bb       	out	0x1e, r24	; 30
 3d4:	2d bb       	out	0x1d, r18	; 29
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	e2 9a       	sbi	0x1c, 2	; 28
 3dc:	e1 9a       	sbi	0x1c, 1	; 28
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
